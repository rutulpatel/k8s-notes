kubectl get pods -n kube-system
kubectl run nginx --image nginx
kubectl run redis --image redis --dry-run=client -o yaml > pod.yaml
kubectl get pods
kubectl create -f pod-definition.yml
kubectl describe pod my-pod
kubectl delete pod my-pod
kubectl edit pod redis
kubectl apply -f pod.yml
kubectl get replicationcontroller
kubectl get replicationset
kubectl replace -f replicaset-definition.yml
kubectl scale --replicas=6 replicaset-definition.yml
kubectl scale --replicas=6 replicaset myapp-replicaset
kubectl delete replicaset my-replicaset
kubectl get deployments
kubectl get all
kubectl run nginx --image=nginx --dry-run=client -o yaml
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml
kubectl get pods --namespace=kube-system
kubectl get pods --all-namespaces
kubectl config set-context $(kubectl config current-context) --namespace=dev
kubectl get services
kubectl get svc
kubectl delete service my-service
kubectl expose deployment nginx --port 80
kubectl set image deployment nginx nginx=nginx:1.18
kubectl apply -f file.yaml
kubectl replace --force -f nginx.yaml
kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml
kubectl expose pod nginx --port=80 --name nginx-service --type=NodePort --dry-run=client -o yaml
kubectl run redis --image=redis:alpine -l tier=db
kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml
kubectl create service clusterip redis-service --tcp=6379:6379
kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3 
kubectl run custom-nginx --image=nginx --port=8080
kubectl create namespace dev-ns
kubectl create deployment redis-deploy --namespace=dev-ns --image=redis --replicas=2
kubectl run httpd --image=httpd:alpine --port=80 --expose
kubectl -n kube-system get pods
kubectl get pods --selector app=App1
kubectl get pods --selector env=dev
kubectl get all --selector env=prod
kubectl get pods --selector env=prod,bu=finance,tier=frontend # and selector
kubectl get pods --selector env=prod;bu=finance;tier=frontend # or selector
kubectl get pods --show-labels #shows all pods labels
kubectl get pods -l env=dev
kubectl get pods -l env=dev --no-headers | wc -l
kubectl taint nodes node-name key=value:taint-effect #(taint-effect = NoSchedule|PreferNoSchedule|NoExecute)
kubectl taint nodes node01 spray=mortein:NoSchedule
kubectl describe node kubemaster | grep -i taint
kubectl taint nodes controlplane node-role.kubernetes.io/master:NoSchedule-
kubectl explain pod --recursive | grep -A5 tolerations # to get pod definition properties
kubectl label nodes <node-name> key=value
kubectl get nodes node01 --show-labels
kubectl get deployment blue -o yaml 
kubectl get daemonsets
kubectl get ds
ps -ef | grep kubelet 
grep -i static /var/lib/kubelet/config.yaml
kubectl run static-busybox --image=busybox --command sleep 1000 --restart=Never --dry-run=client > static-busybox.yaml
kubectl get events
kubectl top node #requires metrics-api
kubectl top pod #requires metrics-api
kubectl create -f . # executes all *.yaml from present directory
watch "kubectl top node"
kubectl logs -f podName
kubectl logs -f podName containerName
kubectl rollout status deployment/myapp-deployment
kubectl rollout history deployment/myapp-deployment
kubectl set image deployment/myapp-deployment nginx=nginx:1.9.1
kubectl rollout undo deployment/myapp-deployment
kubectl create configmap app-config --from-literal=APP_COLOR=blue --from-literal=APP_MOD=prod
kubectl create configmap app-config --from-file=app_config.properties
kubectl create -f config-map.yml
kubectl get configmaps
kubectl get cm
kubectl explain pods --recursive | less
kubectl explain pods --recursive | grep A8 envFrom
kubectl create secret generic app-secret --from-literal=DB_HOST=mysql
kubectl create secret generic app-secret --from-file=secret.properties
kubectl get secrets
kubectl describe secret my-secret
kube-controller-manager --pod-eviction-timeout=5m0s
kubectl drain node-1 # moves pods to different nodes
kubectl uncordon node-1 #allows to schedule pods on node-1
kubectl cordon node-2 # unschedulable
kubectl drain node01 --ignore-daemonsets
kubectl drain node01 --ignore-daemonsets --force
kubeadm upgrade plan
kubeadm upgrade apply
apt-get upgrade -y kubeadm=1.12.0-00
kubeadm upgrade apply v1.12.0
apt-get upgrade -y kubelet=1.12.0-00
kubeadm token list
kubectl version --short
kubeadm version
kubectl get all --all-namespaces -o yaml > all-deploy-services.yaml

